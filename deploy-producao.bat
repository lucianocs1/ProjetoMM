@echo off
REM ================================================================
REM           SCRIPT DE DEPLOY AUTOMATIZADO - E-COMMERCE MM
REM ================================================================

echo.
echo ========================================
echo    üöÄ DEPLOY E-COMMERCE MM - PRODU√á√ÉO
echo ========================================
echo.

REM Verificar se est√° na pasta correta
if not exist "ProjetoMM.sln" (
    echo ‚ùå ERRO: Execute este script na pasta raiz do projeto ProjetoMM
    pause
    exit /b 1
)

echo üìã PREPARANDO DEPLOY PARA PRODU√á√ÉO...
echo.

REM =============================================================================
REM 1. PREPARAR BACKEND PARA DEPLOY
REM =============================================================================
echo.
echo üîß ETAPA 1/3: PREPARANDO BACKEND...
echo ----------------------------------------

cd backend-api

REM Criar arquivo de configura√ß√£o para Railway
echo [build] > railway.toml
echo builder = "nixpacks" >> railway.toml
echo. >> railway.toml
echo [deploy] >> railway.toml
echo startCommand = "dotnet run --urls http://0.0.0.0:$PORT" >> railway.toml
echo. >> railway.toml
echo [env] >> railway.toml
echo PORT = "8080" >> railway.toml

echo ‚úÖ Arquivo railway.toml criado
echo ‚úÖ Backend preparado para Railway

cd..

REM =============================================================================
REM 2. PREPARAR ADMIN PARA DEPLOY
REM =============================================================================
echo.
echo üë®‚Äçüíª ETAPA 2/3: PREPARANDO ADMIN...
echo ----------------------------------------

cd admin-templates

REM Instalar depend√™ncias se necess√°rio
if not exist "node_modules" (
    echo üì¶ Instalando depend√™ncias do admin...
    npm install
)

REM Fazer build do admin
echo üî® Fazendo build do admin...
npm run build

if %ERRORLEVEL% NEQ 0 (
    echo ‚ùå ERRO no build do admin
    pause
    exit /b 1
)

echo ‚úÖ Build do admin conclu√≠do
echo ‚úÖ Admin preparado para Vercel

cd..

REM =============================================================================
REM 3. PREPARAR FRONTEND PARA DEPLOY
REM =============================================================================
echo.
echo üåê ETAPA 3/3: PREPARANDO FRONTEND...
echo ----------------------------------------

cd ecommerce-mm

REM Instalar depend√™ncias se necess√°rio
if not exist "node_modules" (
    echo üì¶ Instalando depend√™ncias do frontend...
    npm install
)

REM Fazer build do frontend
echo üî® Fazendo build do frontend...
npm run build

if %ERRORLEVEL% NEQ 0 (
    echo ‚ùå ERRO no build do frontend
    pause
    exit /b 1
)

echo ‚úÖ Build do frontend conclu√≠do
echo ‚úÖ Frontend preparado para Vercel

cd..

REM =============================================================================
REM 4. INSTRU√á√ïES DE DEPLOY
REM =============================================================================
echo.
echo ========================================
echo       üéâ PREPARA√á√ÉO CONCLU√çDA!
echo ========================================
echo.
echo üìã PR√ìXIMOS PASSOS PARA DEPLOY:
echo.
echo ü•á 1¬∫ LUGAR - BACKEND (API):
echo    ‚Ä¢ Acesse: https://railway.app
echo    ‚Ä¢ Conecte seu GitHub
echo    ‚Ä¢ Selecione este reposit√≥rio
echo    ‚Ä¢ Root Directory: backend-api
echo    ‚Ä¢ Deploy autom√°tico!
echo.
echo ü•à 2¬∫ LUGAR - ADMIN PANEL:
echo    ‚Ä¢ Acesse: https://vercel.com  
echo    ‚Ä¢ Import from GitHub
echo    ‚Ä¢ Selecione este reposit√≥rio
echo    ‚Ä¢ Root Directory: admin-templates
echo    ‚Ä¢ Deploy autom√°tico!
echo.
echo ü•â 3¬∫ LUGAR - FRONTEND P√öBLICO:
echo    ‚Ä¢ Acesse: https://vercel.com
echo    ‚Ä¢ Import from GitHub  
echo    ‚Ä¢ Selecione este reposit√≥rio
echo    ‚Ä¢ Root Directory: ecommerce-mm
echo    ‚Ä¢ Deploy autom√°tico!
echo.
echo ‚ö†Ô∏è  IMPORTANTE:
echo    ‚Ä¢ Anote a URL da API do Railway
echo    ‚Ä¢ Configure as URLs nos arquivos apiConfig.js
echo    ‚Ä¢ Teste cada aplica√ß√£o ap√≥s o deploy
echo.
echo üìñ Consulte: GUIA-COMPLETO-DEPLOY-PRODUCAO.md
echo.

pause
